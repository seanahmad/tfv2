library("bayesplot")
library("rstanarm")
library("ggplot2")
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("rstanarm")
library("bayesplot")
library("rstanarm")
library("ggplot2")
library(dplyr)
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
library(tensorflow)
install_tensorflow()
setwd("C:/Users/michaeljgrogan/Documents/tensorflow-2.0-essentials-whats-new/r-binder/notebooks/4 tensorflow with r")
library(keras)
diabetes1<-read.csv("pima-indians-diabetes1.csv")
install.packages("Rcpp")
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
library(tensorflow)
install_tensorflow()
library(tensorflow)
# install_tensorflow()
setwd("C:/Users/michaeljgrogan/Documents/tensorflow-2.0-essentials-whats-new/r-binder/notebooks/4 tensorflow with r")
library(keras)
diabetes1<-read.csv("pima-indians-diabetes1.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(diabetes1, normalize))
attach(maxmindf)
maxmindf<-as.matrix(maxmindf)
ind <- sample(2, nrow(maxmindf), replace=TRUE, prob = c(0.7,0.3))
X_train <- maxmindf[ind==1, 1:8]
X_val <- maxmindf[ind==2, 1:8]
y_train <- maxmindf[ind==1, 9]
y_val <- maxmindf[ind==2, 9]
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, activation = 'relu', kernel_initializer='RandomNormal', input_shape = c(8)) %>%
layer_dense(units = 8, activation = 'relu') %>%
layer_dense(units = 1, activation = 'linear')
summary(model)
model %>% compile(
loss = 'mean_squared_error',
optimizer = 'adam',
metrics = c('mae')
)
history <- model %>% fit(
X_train, y_train,
epochs = 150, batch_size = 50,
validation_split = 0.2
)
model %>% evaluate(X_val, y_val)
model
pred <- data.frame(y = predict(model, as.matrix(X_val)))
predicted=pred$y * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
actual=y_val * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
df<-data.frame(predicted,actual)
attach(df)
predicted=as.matrix(predicted)
predicted
actual
mpe=((predicted-actual)/actual)
mean(mpe)*100
diabetes2<-read.csv("pima-indians-diabetes2.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf2 <- as.data.frame(lapply(diabetes2, normalize))
attach(maxmindf2)
pred_test <- # Complete this line...
predicted_test = pred_test$y * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
predicted_test
diabetes3<-read.csv("pima-indians-diabetes3.csv")
diabetes3
actual_test = diabetes3$Glucose
df2<-data.frame(predicted_test,actual_test)
attach(df2)
df2
mpe2= # Insert the formula for calculating the mean percentage error here...
mean(mpe2)*100
# install.packages("Rcpp")
# devtools::install_github("rstudio/tensorflow")
#
# devtools::install_github("rstudio/keras")
library(tensorflow)
# install_tensorflow()
setwd("C:/Users/michaeljgrogan/Documents/tensorflow-2.0-essentials-whats-new/r-binder/notebooks/4 tensorflow with r")
library(keras)
diabetes1<-read.csv("pima-indians-diabetes1.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(diabetes1, normalize))
attach(maxmindf)
maxmindf<-as.matrix(maxmindf)
ind <- sample(2, nrow(maxmindf), replace=TRUE, prob = c(0.7,0.3))
X_train <- maxmindf[ind==1, 1:8]
X_val <- maxmindf[ind==2, 1:8]
y_train <- maxmindf[ind==1, 9]
y_val <- maxmindf[ind==2, 9]
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, activation = 'relu', kernel_initializer='RandomNormal', input_shape = c(8)) %>%
layer_dense(units = 8, activation = 'relu') %>%
layer_dense(units = 1, activation = 'linear')
summary(model)
model %>% compile(
loss = 'mean_squared_error',
optimizer = 'adam',
metrics = c('mae')
)
history <- model %>% fit(
X_train, y_train,
epochs = 150, batch_size = 50,
validation_split = 0.2
)
model %>% evaluate(X_val, y_val)
model
pred <- data.frame(y = predict(model, as.matrix(X_val)))
predicted=pred$y * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
actual=y_val * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
df<-data.frame(predicted,actual)
attach(df)
predicted=as.matrix(predicted)
predicted
actual
mpe=((predicted-actual)/actual)
mean(mpe)*100
diabetes2<-read.csv("pima-indians-diabetes2.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf2 <- as.data.frame(lapply(diabetes2, normalize))
attach(maxmindf2)
pred_test <- data.frame(y = predict(model, as.matrix(maxmindf2)))
predicted_test = pred_test$y * abs(diff(range(diabetes1$Glucose))) + min(diabetes1$Glucose)
predicted_test
diabetes3<-read.csv("pima-indians-diabetes3.csv")
diabetes3
actual_test = diabetes3$Glucose
df2<-data.frame(predicted_test,actual_test)
attach(df2)
df2
mpe2=((predicted_test-actual_test)/actual_test)
mean(mpe2)*100
# install.packages("Rcpp")
# devtools::install_github("rstudio/tensorflow")
#
# devtools::install_github("rstudio/keras")
library(tensorflow)
# install_tensorflow()
setwd("C:/Users/michaeljgrogan/Documents/tensorflow-2.0-essentials-whats-new/r-binder/notebooks/4 tensorflow with r")
library(keras)
diabetes1<-read.csv("pima-indians-diabetes1.csv")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
maxmindf <- as.data.frame(lapply(diabetes1, normalize))
attach(maxmindf)
maxmindf<-as.matrix(maxmindf)
ind <- sample(2, nrow(maxmindf), replace=TRUE, prob = c(0.7,0.3))
X_train <- maxmindf[ind==1, 1:8]
X_val <- maxmindf[ind==2, 1:8]
y_train <- maxmindf[ind==1, 9]
y_val <- maxmindf[ind==2, 9]
model <- keras_model_sequential()
